// HTTP 协议
// JLS JVMS

PreparedStatement
	pre-compile：指数据库会对语句进行预编译动作（预编译结果一般会放入缓存，
这个因数据库而异），之后的请求将不再进行编译，直接运行从而提高响应能力，
这对于绑定变量的语句非常有利。

How it works :
1 Precompilation is done by the database. Some simpler databases don't precompile statements at all. Others might precompile it on the prepareStatement call, and yet others might do it when execute is first called on the statement, taking values of the parameters into account when compiling (creating a plan for) the statement.
2 Databases that do precompile statements usually cache them, so in all probability ps1 won't be compiled again. Some JDBC drivers (eg. Oracle's) even cache prepared statements, so they haven't actually closed it when ps.close() was called.
3 Databases generally cache statements until something evicts them from the cache.
以上取自：https://stackoverflow.com/questions/23845383/what-does-it-mean-when-i-say-prepared-statement-is-pre-compiled

使用PreparedStatement的好处：
	1 上面说的会进行预编译，提高性能
	2 PreparedStatement的Batch功能，减少与数据库的交互次数
	3 
每次连接调用PreparedStatement方法会产生数据库连接，而createStatement是不会的。包括最后语句
的发送，第一次使用PreparedStatement会产生2次数据库交互

-------------------------------------------------------------------------------------

线程和进程的区别是什么？
一个进程中可以包含若干个线程，它们可以利用进程所拥有的资源。在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，
而把线程作为独立运行和独立调度的基本单位。
线程与进程的区别归纳：
地址空间和其它资源：进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。
通信：进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信――需要进程同步和互斥手段的辅助，以保证数据的一致性。
调度和切换：线程上下文切换比进程上下文切换要快得多。

-------------------------------------------------------------------------------------

TCP/IP 的三次握手四次挥手

-------------------------------------------------------------------------------------
JDBC mybatis Hibernate的比较

JDBC更为灵活，更加有效率，系统运行速度快。但是代码繁琐复杂，有的时候用了存储过程就不方便数据库移植了。
hibernate，iBatis 关系数据库框架，开发速度快，更加面向对象，可以移植更换数据库，但影响系统性能。

JDBC:手动
手动写sql，不能直接传入一个对象、不能直接返回一个对象。
iBatis的特点:半自动化
手动写sql，能直接传入一个对象、能直接返回一个对象。
Hibernate:全自动
不写sql,自动封装，能直接传入一个对象、能直接返回一个对象。

iBatis：
优点 : 代码量减少、简单易上手、SQL语句和代码分离（便于修改）、数据库可移植
缺点：SQL语句需要自己写、参数只能有一个
 
Hibernate：
优点：对象关系数据库映射、完全面向对象、提供缓存机制、HQL编程
缺点：不能灵活使用原生SQL、 无法对SQL优化、全表映射效率低下、N+1的问题

引申出另一个问题：MyBatis和iBatis的区别
ibatis本是apache的一个开源项目，2010年这个项目由apache software foundation 迁移到了google code，并且改名为mybatis
 1 Mybatis实现了接口绑定，使用更加方便：
在ibatis2.x中我们需要在DAO的实现类中指定具体对应哪个xml映射文件，而Mybatis实现了DAO接口与xml映射文件的绑定，
 2 对象关系映射的改进，效率更高
 
-------------------------------------------------------------------------------------

Class.forName和classloader.loadClass()的区别
前者load类之后类必须进行initialing
后者load类之后未进行linking
对于JDBC驱动类的加载必须使用前者，因为驱动的注册是在static语句中，而static语句是类initialing才会执行

-------------------------------------------------------------------------------------

Hashtable,HashMap,ConcurrentHashMap底层实现原理与线程安全问题

-------------------------------------------------------------------------------------

java的基础类型和字节大小

-------------------------------------------------------------------------------------

Java 的引用类型有哪几种

-------------------------------------------------------------------------------------

String 编码UTF-8 和GBK的区别?

-------------------------------------------------------------------------------------

什么时候使用字节流、什么时候使用字符流?

-------------------------------------------------------------------------------------

异常的结构，运行时异常和非运行时异常，各举个例子

-------------------------------------------------------------------------------------
newFixedThreadPool此种线程池如果线程数达到最大值后会怎么办，底层原理
// 不会再增加工作线程，新增来的任务放入任务队列(默认个数是Integer.MAX_VALUE)，当超过队列最大值，采取直接抛弃任务的策略

						提供传ThreadFactory的实现		默认队列
newFixedThreadPool      	是							SynchronousQueue
newCachedThreadPool        	是							SynchronousQueue
newScheduledThreadPool
newSingleThreadScheduledExecutor										DelayedWorkQueue
-------------------------------------------------------------------------------------

移位
左移N位即乘上2的N次方，不管负数还是正数，如果超过最大位数（比如整形超过32），则取模，比如
2<<33  则等价于 2<<1 
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------

