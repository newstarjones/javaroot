State Machine and Transition

给定一个idealstate，helix负责确保集群达成该状态。helix controller读取idealstate，命令每一个participant采取适当动作以达到理想状态。这些动作称为transition。
finite state machine 有限状态机
每个资源关联一个状态机，因此一个集群中可以管理多种资源。
state 描述replica的角色，master还是slave
transition 动作，使得replica的角色发生改变
current state 当前参与节点(participant)上所有资源的实际状态
spectator 旁观者，观众
Rebalancer 重新平衡
Helix的Controller，在每一次发生集群事件时，都会进行Rebalance。
the system is considered stable which implies 'IdealState = CurrentState = ExternalView'。


Dynamic IdealState
ideal State也是可以动态调整的

----------------------Helix architecture-----------------------
Helix 将节点分为3类：participant spectator controller
cluster state metadata store 使用zk

http://stackoverflow.com/questions/16401412/apache-helix-vs-yarn



state model 状态模型：  在一个helix集群中，可以存在多个state model。每一个资源都要配置一个state model以管理他们的ideal state.
三个最常见的状态模型：
mater-slave
online-offline
leader-standby

helix architecture helix 架构
why: 
what： 管理集群中的各种组件.提供一种机制协调集群中的各个node和component.  反映集群中的各种变化，形成一系列可以使集群达到稳定状态的任务，这些任务将分配到集群的各个node.
how: 

role 角色
participant // hosting 资源
spectator // 获取current state 主要进行request route
controller // 负责核心的协调功能

每个分区一个state，每一个state一个constrain（constrain理解：比如，成为一个MASTER状态前一个状态必须是SLAVE）
不进每一个state有constrain，每一个transition都有constrain
