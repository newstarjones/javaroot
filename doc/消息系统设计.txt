典型问题：
1 消息的顺序问题
2 消息的重复问题  


性能指标
	吞吐量  每秒发送消息数/字节数 和 每秒接收消息数/字节数
	消息延迟 

参考文章： http://blog.csdn.net/lovesomnus/article/details/51776942
rocketmq对上面的处理：
	1 发送到一个分区(即队列)上，且只有一个消费者消费 
	2 交给消费方自己实现 一般存有一个去重表，表里记录了消息消费状况
	
	
避免消息重复的方案：
	1 利用发送消息时消息ID的唯一性
		// activemq 是JMSMessageID ，这个好像改不动
	2 消费端接收消息时进行幂等处理
		// 自己实现或者 如参考资料建议的使用Camel提供的幂等方案
	3 Broker进行消息去重（但我们必须定义清楚 消息重复的业务含义）
		// 在消息属性中定义消息唯一性属性，在Broker中写一个去重插件

参考: https://stackoverflow.com/questions/4934386/avoiding-duplicated-messages-on-jms-activemq
	大型网站系统与Java中间件实践

消息可靠性:
	// activemq 采用事务式的session
	// 其他未考虑

	
---------------------------------------------------------------
基本知识：
	卡夫卡单机写入TPS约在百万条/秒，消息大小10个字节
	RocketMQ单机写入TPS单实例约7万条/秒，单机部署3个Broker，可以跑到最高12万条/秒，消息大小10个字节
总结：Kafka的TPS跑到单机百万，主要是由于Producer端将多个小消息合并，批量发向Broker。
RocketMQ为什么没有这么做？
	根本原因是基于消息丢失和JVM的GC能力
	消息类型可以根据是否有broker进行分类，有broker的产品发送和接收速率一般是对等的
无broker的产品往往是发送速率远高于接受速率

activeMQ rabbitMQ rocketMQ Kafka
// 关注在机器性能一样，都启用最优配置的情形下 的 吞吐量
影响因子：分区数量、消息大小、消费形式

RocketMQ在阿里集团被广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog分发等场景 

1 在服务端处理同步发送的性能上，Kafka>RocketMQ>RabbitMQ。 // 主要是测试其吞吐量，即TPS
2 在消息发送端，消费端共存的场景下，随着Topic数的增加Kafka吞吐量会急剧下降，而RocketMQ则表现稳定。
因此Kafka适合Topic和消费端都比较少的业务场景，而RocketMQ更适合多Topic，多消费端的业务场景。
	// 根本原因在于 kafka每个topic每个分区都会对应一个文件，导致消息落盘时发生大量IO竞争。 即 kafka是物理分区，而rocketmq是逻辑分区

单独将rocketmq和kafka进行对比
	kafka超过64个分区(队列)，load会明显飙高
	消费者的集群规模和队列数成正比
	



消息队列性能对比――ActiveMQ、RabbitMQ与ZeroMQ
https://www.idaima.com/article/3894

常用消息队列对比	
http://www.howardliu.cn/middleware/the-different-between-some-distributed-message-queue/
	
// 基本常识
每个Topic对应多个分区，每个分区对应一个消费组中的某一个线程